Terminals unused in grammar

    INT_TYPE
    DOUBLE_QUOT


Grammar

    0 $accept: root $end

    1 root: declaration_list

    2 declaration_list: declaration
    3                 | declaration_list declaration

    4 declaration: FUNC identifier_expression LP parameter_list RP compound_statement

    5 parameter_list: %empty

    6 statement_list: statement
    7               | statement_list statement

    8 statement: dump_statement
    9          | compound_statement
   10          | expression_statement

   11 expression_statement: expression SEMICOLON

   12 dump_statement: DMP LP expression RP SEMICOLON

   13 compound_statement: LC RC
   14                   | LC statement_list RC

   15 expression: intliteral_expression
   16           | identifier_expression
   17           | postfix_expression

   18 postfix_expression: identifier_expression LP RP

   19 identifier_expression: STR
   20                      | IDENTIFIER

   21 intliteral_expression: INT_LITERAL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 20
    INT_LITERAL (259) 21
    DMP (260) 12
    FUNC (261) 4
    INT_TYPE (262)
    STR (263) 19
    DOUBLE_QUOT (264)
    SEMICOLON (265) 11 12
    LC (266) 13 14
    RC (267) 13 14
    LP (268) 4 12 18
    RP (269) 4 12 18


Nonterminals, with rules where they appear

    $accept (15)
        on left: 0
    root <Root*> (16)
        on left: 1
        on right: 0
    declaration_list <DeclarationList*> (17)
        on left: 2 3
        on right: 1 3
    declaration <Declaration*> (18)
        on left: 4
        on right: 2 3
    parameter_list <ParameterList*> (19)
        on left: 5
        on right: 4
    statement_list <StatementList*> (20)
        on left: 6 7
        on right: 7 14
    statement <Statement*> (21)
        on left: 8 9 10
        on right: 6 7
    expression_statement <Statement*> (22)
        on left: 11
        on right: 10
    dump_statement <Statement*> (23)
        on left: 12
        on right: 8
    compound_statement <Statement*> (24)
        on left: 13 14
        on right: 4 9
    expression <Expression*> (25)
        on left: 15 16 17
        on right: 11 12
    postfix_expression <Expression*> (26)
        on left: 18
        on right: 17
    identifier_expression <Expression*> (27)
        on left: 19 20
        on right: 4 16 18
    intliteral_expression <Expression*> (28)
        on left: 21
        on right: 15


State 0

    0 $accept: • root $end
    1 root: • declaration_list
    2 declaration_list: • declaration
    3                 | • declaration_list declaration
    4 declaration: • FUNC identifier_expression LP parameter_list RP compound_statement

    FUNC  shift, and go to state 1

    root              go to state 2
    declaration_list  go to state 3
    declaration       go to state 4


State 1

    4 declaration: FUNC • identifier_expression LP parameter_list RP compound_statement
   19 identifier_expression: • STR
   20                      | • IDENTIFIER

    IDENTIFIER  shift, and go to state 5
    STR         shift, and go to state 6

    identifier_expression  go to state 7


State 2

    0 $accept: root • $end

    $end  shift, and go to state 8


State 3

    1 root: declaration_list •  [$end]
    3 declaration_list: declaration_list • declaration
    4 declaration: • FUNC identifier_expression LP parameter_list RP compound_statement

    FUNC  shift, and go to state 1

    $default  reduce using rule 1 (root)

    declaration  go to state 9


State 4

    2 declaration_list: declaration •

    $default  reduce using rule 2 (declaration_list)


State 5

   20 identifier_expression: IDENTIFIER •

    $default  reduce using rule 20 (identifier_expression)


State 6

   19 identifier_expression: STR •

    $default  reduce using rule 19 (identifier_expression)


State 7

    4 declaration: FUNC identifier_expression • LP parameter_list RP compound_statement

    LP  shift, and go to state 10


State 8

    0 $accept: root $end •

    $default  accept


State 9

    3 declaration_list: declaration_list declaration •

    $default  reduce using rule 3 (declaration_list)


State 10

    4 declaration: FUNC identifier_expression LP • parameter_list RP compound_statement
    5 parameter_list: • %empty

    $default  reduce using rule 5 (parameter_list)

    parameter_list  go to state 11


State 11

    4 declaration: FUNC identifier_expression LP parameter_list • RP compound_statement

    RP  shift, and go to state 12


State 12

    4 declaration: FUNC identifier_expression LP parameter_list RP • compound_statement
   13 compound_statement: • LC RC
   14                   | • LC statement_list RC

    LC  shift, and go to state 13

    compound_statement  go to state 14


State 13

    6 statement_list: • statement
    7               | • statement_list statement
    8 statement: • dump_statement
    9          | • compound_statement
   10          | • expression_statement
   11 expression_statement: • expression SEMICOLON
   12 dump_statement: • DMP LP expression RP SEMICOLON
   13 compound_statement: • LC RC
   13                   | LC • RC
   14                   | • LC statement_list RC
   14                   | LC • statement_list RC
   15 expression: • intliteral_expression
   16           | • identifier_expression
   17           | • postfix_expression
   18 postfix_expression: • identifier_expression LP RP
   19 identifier_expression: • STR
   20                      | • IDENTIFIER
   21 intliteral_expression: • INT_LITERAL

    IDENTIFIER   shift, and go to state 5
    INT_LITERAL  shift, and go to state 15
    DMP          shift, and go to state 16
    STR          shift, and go to state 6
    LC           shift, and go to state 13
    RC           shift, and go to state 17

    statement_list         go to state 18
    statement              go to state 19
    expression_statement   go to state 20
    dump_statement         go to state 21
    compound_statement     go to state 22
    expression             go to state 23
    postfix_expression     go to state 24
    identifier_expression  go to state 25
    intliteral_expression  go to state 26


State 14

    4 declaration: FUNC identifier_expression LP parameter_list RP compound_statement •

    $default  reduce using rule 4 (declaration)


State 15

   21 intliteral_expression: INT_LITERAL •

    $default  reduce using rule 21 (intliteral_expression)


State 16

   12 dump_statement: DMP • LP expression RP SEMICOLON

    LP  shift, and go to state 27


State 17

   13 compound_statement: LC RC •

    $default  reduce using rule 13 (compound_statement)


State 18

    7 statement_list: statement_list • statement
    8 statement: • dump_statement
    9          | • compound_statement
   10          | • expression_statement
   11 expression_statement: • expression SEMICOLON
   12 dump_statement: • DMP LP expression RP SEMICOLON
   13 compound_statement: • LC RC
   14                   | • LC statement_list RC
   14                   | LC statement_list • RC
   15 expression: • intliteral_expression
   16           | • identifier_expression
   17           | • postfix_expression
   18 postfix_expression: • identifier_expression LP RP
   19 identifier_expression: • STR
   20                      | • IDENTIFIER
   21 intliteral_expression: • INT_LITERAL

    IDENTIFIER   shift, and go to state 5
    INT_LITERAL  shift, and go to state 15
    DMP          shift, and go to state 16
    STR          shift, and go to state 6
    LC           shift, and go to state 13
    RC           shift, and go to state 28

    statement              go to state 29
    expression_statement   go to state 20
    dump_statement         go to state 21
    compound_statement     go to state 22
    expression             go to state 23
    postfix_expression     go to state 24
    identifier_expression  go to state 25
    intliteral_expression  go to state 26


State 19

    6 statement_list: statement •

    $default  reduce using rule 6 (statement_list)


State 20

   10 statement: expression_statement •

    $default  reduce using rule 10 (statement)


State 21

    8 statement: dump_statement •

    $default  reduce using rule 8 (statement)


State 22

    9 statement: compound_statement •

    $default  reduce using rule 9 (statement)


State 23

   11 expression_statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 30


State 24

   17 expression: postfix_expression •

    $default  reduce using rule 17 (expression)


State 25

   16 expression: identifier_expression •  [SEMICOLON, RP]
   18 postfix_expression: identifier_expression • LP RP

    LP  shift, and go to state 31

    $default  reduce using rule 16 (expression)


State 26

   15 expression: intliteral_expression •

    $default  reduce using rule 15 (expression)


State 27

   12 dump_statement: DMP LP • expression RP SEMICOLON
   15 expression: • intliteral_expression
   16           | • identifier_expression
   17           | • postfix_expression
   18 postfix_expression: • identifier_expression LP RP
   19 identifier_expression: • STR
   20                      | • IDENTIFIER
   21 intliteral_expression: • INT_LITERAL

    IDENTIFIER   shift, and go to state 5
    INT_LITERAL  shift, and go to state 15
    STR          shift, and go to state 6

    expression             go to state 32
    postfix_expression     go to state 24
    identifier_expression  go to state 25
    intliteral_expression  go to state 26


State 28

   14 compound_statement: LC statement_list RC •

    $default  reduce using rule 14 (compound_statement)


State 29

    7 statement_list: statement_list statement •

    $default  reduce using rule 7 (statement_list)


State 30

   11 expression_statement: expression SEMICOLON •

    $default  reduce using rule 11 (expression_statement)


State 31

   18 postfix_expression: identifier_expression LP • RP

    RP  shift, and go to state 33


State 32

   12 dump_statement: DMP LP expression • RP SEMICOLON

    RP  shift, and go to state 34


State 33

   18 postfix_expression: identifier_expression LP RP •

    $default  reduce using rule 18 (postfix_expression)


State 34

   12 dump_statement: DMP LP expression RP • SEMICOLON

    SEMICOLON  shift, and go to state 35


State 35

   12 dump_statement: DMP LP expression RP SEMICOLON •

    $default  reduce using rule 12 (dump_statement)
