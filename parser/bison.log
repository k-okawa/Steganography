Grammar

    0 $accept: root $end

    1 root: declaration_list

    2 declaration_list: declaration
    3                 | declaration_list declaration

    4 declaration: INT_TYPE identifier_expression LP parameter_list RP compound_statement

    5 parameter_list: %empty

    6 statement_list: statement
    7               | statement_list statement

    8 statement: dump_statement
    9          | compound_statement
   10          | expression_statement

   11 expression_statement: expression SEMICOLON

   12 dump_statement: DMP expression SEMICOLON

   13 compound_statement: LC RC
   14                   | LC statement_list RC

   15 expression: intliteral_expression
   16           | identifier_expression
   17           | postfix_expression

   18 postfix_expression: identifier_expression LP RP

   19 identifier_expression: IDENTIFIER

   20 intliteral_expression: INT_LITERAL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 19
    INT_LITERAL (259) 20
    DMP (260) 12
    INT_TYPE (261) 4
    SEMICOLON (262) 11 12
    LC (263) 13 14
    RC (264) 13 14
    LP (265) 4 18
    RP (266) 4 18


Nonterminals, with rules where they appear

    $accept (12)
        on left: 0
    root <Root*> (13)
        on left: 1
        on right: 0
    declaration_list <DeclarationList*> (14)
        on left: 2 3
        on right: 1 3
    declaration <Declaration*> (15)
        on left: 4
        on right: 2 3
    parameter_list <ParameterList*> (16)
        on left: 5
        on right: 4
    statement_list <StatementList*> (17)
        on left: 6 7
        on right: 7 14
    statement <Statement*> (18)
        on left: 8 9 10
        on right: 6 7
    expression_statement <Statement*> (19)
        on left: 11
        on right: 10
    dump_statement <Statement*> (20)
        on left: 12
        on right: 8
    compound_statement <Statement*> (21)
        on left: 13 14
        on right: 4 9
    expression <Expression*> (22)
        on left: 15 16 17
        on right: 11 12
    postfix_expression <Expression*> (23)
        on left: 18
        on right: 17
    identifier_expression <Expression*> (24)
        on left: 19
        on right: 4 16 18
    intliteral_expression <Expression*> (25)
        on left: 20
        on right: 15


State 0

    0 $accept: • root $end
    1 root: • declaration_list
    2 declaration_list: • declaration
    3                 | • declaration_list declaration
    4 declaration: • INT_TYPE identifier_expression LP parameter_list RP compound_statement

    INT_TYPE  shift, and go to state 1

    root              go to state 2
    declaration_list  go to state 3
    declaration       go to state 4


State 1

    4 declaration: INT_TYPE • identifier_expression LP parameter_list RP compound_statement
   19 identifier_expression: • IDENTIFIER

    IDENTIFIER  shift, and go to state 5

    identifier_expression  go to state 6


State 2

    0 $accept: root • $end

    $end  shift, and go to state 7


State 3

    1 root: declaration_list •  [$end]
    3 declaration_list: declaration_list • declaration
    4 declaration: • INT_TYPE identifier_expression LP parameter_list RP compound_statement

    INT_TYPE  shift, and go to state 1

    $default  reduce using rule 1 (root)

    declaration  go to state 8


State 4

    2 declaration_list: declaration •

    $default  reduce using rule 2 (declaration_list)


State 5

   19 identifier_expression: IDENTIFIER •

    $default  reduce using rule 19 (identifier_expression)


State 6

    4 declaration: INT_TYPE identifier_expression • LP parameter_list RP compound_statement

    LP  shift, and go to state 9


State 7

    0 $accept: root $end •

    $default  accept


State 8

    3 declaration_list: declaration_list declaration •

    $default  reduce using rule 3 (declaration_list)


State 9

    4 declaration: INT_TYPE identifier_expression LP • parameter_list RP compound_statement
    5 parameter_list: • %empty

    $default  reduce using rule 5 (parameter_list)

    parameter_list  go to state 10


State 10

    4 declaration: INT_TYPE identifier_expression LP parameter_list • RP compound_statement

    RP  shift, and go to state 11


State 11

    4 declaration: INT_TYPE identifier_expression LP parameter_list RP • compound_statement
   13 compound_statement: • LC RC
   14                   | • LC statement_list RC

    LC  shift, and go to state 12

    compound_statement  go to state 13


State 12

    6 statement_list: • statement
    7               | • statement_list statement
    8 statement: • dump_statement
    9          | • compound_statement
   10          | • expression_statement
   11 expression_statement: • expression SEMICOLON
   12 dump_statement: • DMP expression SEMICOLON
   13 compound_statement: • LC RC
   13                   | LC • RC
   14                   | • LC statement_list RC
   14                   | LC • statement_list RC
   15 expression: • intliteral_expression
   16           | • identifier_expression
   17           | • postfix_expression
   18 postfix_expression: • identifier_expression LP RP
   19 identifier_expression: • IDENTIFIER
   20 intliteral_expression: • INT_LITERAL

    IDENTIFIER   shift, and go to state 5
    INT_LITERAL  shift, and go to state 14
    DMP          shift, and go to state 15
    LC           shift, and go to state 12
    RC           shift, and go to state 16

    statement_list         go to state 17
    statement              go to state 18
    expression_statement   go to state 19
    dump_statement         go to state 20
    compound_statement     go to state 21
    expression             go to state 22
    postfix_expression     go to state 23
    identifier_expression  go to state 24
    intliteral_expression  go to state 25


State 13

    4 declaration: INT_TYPE identifier_expression LP parameter_list RP compound_statement •

    $default  reduce using rule 4 (declaration)


State 14

   20 intliteral_expression: INT_LITERAL •

    $default  reduce using rule 20 (intliteral_expression)


State 15

   12 dump_statement: DMP • expression SEMICOLON
   15 expression: • intliteral_expression
   16           | • identifier_expression
   17           | • postfix_expression
   18 postfix_expression: • identifier_expression LP RP
   19 identifier_expression: • IDENTIFIER
   20 intliteral_expression: • INT_LITERAL

    IDENTIFIER   shift, and go to state 5
    INT_LITERAL  shift, and go to state 14

    expression             go to state 26
    postfix_expression     go to state 23
    identifier_expression  go to state 24
    intliteral_expression  go to state 25


State 16

   13 compound_statement: LC RC •

    $default  reduce using rule 13 (compound_statement)


State 17

    7 statement_list: statement_list • statement
    8 statement: • dump_statement
    9          | • compound_statement
   10          | • expression_statement
   11 expression_statement: • expression SEMICOLON
   12 dump_statement: • DMP expression SEMICOLON
   13 compound_statement: • LC RC
   14                   | • LC statement_list RC
   14                   | LC statement_list • RC
   15 expression: • intliteral_expression
   16           | • identifier_expression
   17           | • postfix_expression
   18 postfix_expression: • identifier_expression LP RP
   19 identifier_expression: • IDENTIFIER
   20 intliteral_expression: • INT_LITERAL

    IDENTIFIER   shift, and go to state 5
    INT_LITERAL  shift, and go to state 14
    DMP          shift, and go to state 15
    LC           shift, and go to state 12
    RC           shift, and go to state 27

    statement              go to state 28
    expression_statement   go to state 19
    dump_statement         go to state 20
    compound_statement     go to state 21
    expression             go to state 22
    postfix_expression     go to state 23
    identifier_expression  go to state 24
    intliteral_expression  go to state 25


State 18

    6 statement_list: statement •

    $default  reduce using rule 6 (statement_list)


State 19

   10 statement: expression_statement •

    $default  reduce using rule 10 (statement)


State 20

    8 statement: dump_statement •

    $default  reduce using rule 8 (statement)


State 21

    9 statement: compound_statement •

    $default  reduce using rule 9 (statement)


State 22

   11 expression_statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 29


State 23

   17 expression: postfix_expression •

    $default  reduce using rule 17 (expression)


State 24

   16 expression: identifier_expression •  [SEMICOLON]
   18 postfix_expression: identifier_expression • LP RP

    LP  shift, and go to state 30

    $default  reduce using rule 16 (expression)


State 25

   15 expression: intliteral_expression •

    $default  reduce using rule 15 (expression)


State 26

   12 dump_statement: DMP expression • SEMICOLON

    SEMICOLON  shift, and go to state 31


State 27

   14 compound_statement: LC statement_list RC •

    $default  reduce using rule 14 (compound_statement)


State 28

    7 statement_list: statement_list statement •

    $default  reduce using rule 7 (statement_list)


State 29

   11 expression_statement: expression SEMICOLON •

    $default  reduce using rule 11 (expression_statement)


State 30

   18 postfix_expression: identifier_expression LP • RP

    RP  shift, and go to state 32


State 31

   12 dump_statement: DMP expression SEMICOLON •

    $default  reduce using rule 12 (dump_statement)


State 32

   18 postfix_expression: identifier_expression LP RP •

    $default  reduce using rule 18 (postfix_expression)
